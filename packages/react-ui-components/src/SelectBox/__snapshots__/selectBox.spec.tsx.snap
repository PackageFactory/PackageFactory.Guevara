// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SelectBox/> should render correctly with DropDownToggle 1`] = `
<ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)
  className="selectBoxClassName"
  composeTheme="deeply"
  isOpen={false}
  mapThemrProps={[Function]}
  onClose={[Function]}
  onToggle={[Function]}
>
  <ThemedContextDropDownHeader
    className="selectBox__btnClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    shouldKeepFocusState={false}
    showDropDownToggle={false}
  >
    <ThemedSelectBox_Header
      ListPreviewElement={[Function]}
      composeTheme="deeply"
      createNewLabel="createNewLabel"
      displayLoadingIndicator={false}
      displaySearchBox={false}
      keydown={Object {}}
      loadingLabel="loadingLabel"
      mapThemrProps={[Function]}
      noMatchesFoundLabel="noMatchesFoundLabel"
      onCreateNew={[MockFunction]}
      onReset={[Function]}
      onSearchTermChange={[MockFunction]}
      onSearchTermKeyPress={[MockFunction]}
      onValueChange={[MockFunction]}
      optionValueField="value"
      options={Array []}
      placeholder="placeholder"
      scrollable={true}
      searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
      showDropDownToggle={true}
      showResetButton={false}
      theme={
        Object {
          "selectBox": "selectBoxClassName",
          "selectBox--disabled": "selectBox--disabledClassName",
          "selectBoxHeader": "selectBoxHeaderClassName",
          "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
          "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
          "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
          "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
          "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
          "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
          "selectBoxHeader__label": "selectBoxHeader__labelClassName",
          "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
          "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
          "selectBox__btn": "selectBox__btnClassName",
          "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
          "selectBox__contents": "selectBox__contentsClassName",
          "selectBox__groupHeader": "selectBox__groupHeaderClassName",
          "selectBox__item": "selectBox__itemClassName",
          "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
          "selectBox__list": "selectBox__listClassName",
          "wrapper": "wrapperClassName",
          "wrapper--highlight": "wrapper--highlightClassName",
        }
      }
      threshold={2}
      withoutGroupLabel="Without group"
    />
  </ThemedContextDropDownHeader>
  <ThemedContextDropDownContents
    className="selectBox__contentsClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    scrollable={true}
  >
    <ul
      className="selectBox__listClassName"
    >
      <SelectBox_ListPreview
        ListPreviewElement={[Function]}
        createNewLabel="createNewLabel"
        displayLoadingIndicator={false}
        displaySearchBox={false}
        focusedValue=""
        keydown={Object {}}
        loadingLabel="loadingLabel"
        noMatchesFound={true}
        noMatchesFoundLabel="noMatchesFoundLabel"
        onChange={[Function]}
        onCreateNew={[MockFunction]}
        onOptionFocus={[Function]}
        onSearchTermChange={[MockFunction]}
        onSearchTermKeyPress={[MockFunction]}
        onValueChange={[MockFunction]}
        optionValueAccessor={[Function]}
        optionValueField="value"
        options={Array []}
        placeholder="placeholder"
        scrollable={true}
        searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
        searchTerm=""
        searchTermLeftToType={0}
        showDropDownToggle={true}
        theme={
          Object {
            "selectBox": "selectBoxClassName",
            "selectBox--disabled": "selectBox--disabledClassName",
            "selectBoxHeader": "selectBoxHeaderClassName",
            "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
            "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
            "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
            "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
            "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
            "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
            "selectBoxHeader__label": "selectBoxHeader__labelClassName",
            "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
            "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
            "selectBox__btn": "selectBox__btnClassName",
            "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
            "selectBox__contents": "selectBox__contentsClassName",
            "selectBox__groupHeader": "selectBox__groupHeaderClassName",
            "selectBox__item": "selectBox__itemClassName",
            "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
            "selectBox__list": "selectBox__listClassName",
            "wrapper": "wrapperClassName",
            "wrapper--highlight": "wrapper--highlightClassName",
          }
        }
        threshold={2}
        withoutGroupLabel="Without group"
      />
    </ul>
  </ThemedContextDropDownContents>
</ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)>
`;

exports[`<SelectBox/> should render correctly with DropDownToggle 2`] = `
<div
  class="selectBoxClassName"
>
  <div
    aria-haspopup="true"
    class="selectBox__btnClassName"
    role="button"
  >
    <div
      class="selectBoxHeaderClassName"
    >
      <div
        class="selectBoxHeader__innerPreviewClassName"
      >
        <div
          class="selectBoxHeader__labelClassName"
        >
          placeholder
        </div>
      </div>
    </div>
  </div>
  <ul
    aria-hidden="true"
    aria-label="dropdown"
    class="selectBox__contentsClassName"
    role="listbox"
  />
</div>
`;

exports[`<SelectBox/> should render correctly with LoadingIndicator 1`] = `
<ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)
  className="selectBoxClassName"
  composeTheme="deeply"
  isOpen={false}
  mapThemrProps={[Function]}
  onClose={[Function]}
  onToggle={[Function]}
>
  <ThemedContextDropDownHeader
    className="selectBox__btnClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    shouldKeepFocusState={false}
    showDropDownToggle={false}
  >
    <ThemedSelectBox_Header
      ListPreviewElement={[Function]}
      composeTheme="deeply"
      createNewLabel="createNewLabel"
      displayLoadingIndicator={true}
      displaySearchBox={false}
      keydown={Object {}}
      loadingLabel="loadingLabel"
      mapThemrProps={[Function]}
      noMatchesFoundLabel="noMatchesFoundLabel"
      onCreateNew={[MockFunction]}
      onReset={[Function]}
      onSearchTermChange={[MockFunction]}
      onSearchTermKeyPress={[MockFunction]}
      onValueChange={[MockFunction]}
      optionValueField="value"
      options={Array []}
      placeholder="placeholder"
      scrollable={true}
      searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
      showDropDownToggle={true}
      showResetButton={false}
      theme={
        Object {
          "selectBox": "selectBoxClassName",
          "selectBox--disabled": "selectBox--disabledClassName",
          "selectBoxHeader": "selectBoxHeaderClassName",
          "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
          "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
          "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
          "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
          "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
          "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
          "selectBoxHeader__label": "selectBoxHeader__labelClassName",
          "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
          "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
          "selectBox__btn": "selectBox__btnClassName",
          "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
          "selectBox__contents": "selectBox__contentsClassName",
          "selectBox__groupHeader": "selectBox__groupHeaderClassName",
          "selectBox__item": "selectBox__itemClassName",
          "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
          "selectBox__list": "selectBox__listClassName",
          "wrapper": "wrapperClassName",
          "wrapper--highlight": "wrapper--highlightClassName",
        }
      }
      threshold={2}
      withoutGroupLabel="Without group"
    />
  </ThemedContextDropDownHeader>
  <ThemedContextDropDownContents
    className="selectBox__contentsClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    scrollable={true}
  >
    <ul
      className="selectBox__listClassName"
    >
      <SelectBox_ListPreview
        ListPreviewElement={[Function]}
        createNewLabel="createNewLabel"
        displayLoadingIndicator={true}
        displaySearchBox={false}
        focusedValue=""
        keydown={Object {}}
        loadingLabel="loadingLabel"
        noMatchesFound={false}
        noMatchesFoundLabel="noMatchesFoundLabel"
        onChange={[Function]}
        onCreateNew={[MockFunction]}
        onOptionFocus={[Function]}
        onSearchTermChange={[MockFunction]}
        onSearchTermKeyPress={[MockFunction]}
        onValueChange={[MockFunction]}
        optionValueAccessor={[Function]}
        optionValueField="value"
        options={Array []}
        placeholder="placeholder"
        scrollable={true}
        searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
        searchTerm=""
        searchTermLeftToType={0}
        showDropDownToggle={true}
        theme={
          Object {
            "selectBox": "selectBoxClassName",
            "selectBox--disabled": "selectBox--disabledClassName",
            "selectBoxHeader": "selectBoxHeaderClassName",
            "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
            "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
            "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
            "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
            "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
            "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
            "selectBoxHeader__label": "selectBoxHeader__labelClassName",
            "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
            "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
            "selectBox__btn": "selectBox__btnClassName",
            "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
            "selectBox__contents": "selectBox__contentsClassName",
            "selectBox__groupHeader": "selectBox__groupHeaderClassName",
            "selectBox__item": "selectBox__itemClassName",
            "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
            "selectBox__list": "selectBox__listClassName",
            "wrapper": "wrapperClassName",
            "wrapper--highlight": "wrapper--highlightClassName",
          }
        }
        threshold={2}
        withoutGroupLabel="Without group"
      />
    </ul>
  </ThemedContextDropDownContents>
</ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)>
`;

exports[`<SelectBox/> should render correctly with LoadingIndicator 2`] = `
<div
  class="selectBoxClassName"
>
  <div
    aria-haspopup="true"
    class="selectBox__btnClassName"
    role="button"
  >
    <div
      class="selectBoxHeaderClassName"
    >
      <span
        class="selectBoxHeader__wrapperIconWrapperClassName"
      >
        <svg
          aria-hidden="true"
          class="neos-svg-inline--fa neos-fa-spinner fa-w-16 fa-spin spinner selectBoxHeader__iconClassName"
          data-icon="spinner"
          data-prefix="fas"
          role="img"
          viewBox="0 0 512 512"
          xmlns="http://www.w3.org/2000/svg"
        >
          <path
            d="M304 48c0 26.51-21.49 48-48 48s-48-21.49-48-48 21.49-48 48-48 48 21.49 48 48zm-48 368c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zm208-208c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.49-48-48-48zM96 256c0-26.51-21.49-48-48-48S0 229.49 0 256s21.49 48 48 48 48-21.49 48-48zm12.922 99.078c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.491-48-48-48zm294.156 0c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48c0-26.509-21.49-48-48-48zM108.922 60.922c-26.51 0-48 21.49-48 48s21.49 48 48 48 48-21.49 48-48-21.491-48-48-48z"
            fill="currentColor"
          />
        </svg>
      </span>
    </div>
  </div>
  <ul
    aria-hidden="true"
    aria-label="dropdown"
    class="selectBox__contentsClassName"
    role="listbox"
  />
</div>
`;

exports[`<SelectBox/> should render correctly with SearchBox 1`] = `
<ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)
  className="selectBoxClassName"
  composeTheme="deeply"
  isOpen={false}
  mapThemrProps={[Function]}
  onClose={[Function]}
  onToggle={[Function]}
>
  <ThemedContextDropDownHeader
    className="selectBox__btnClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    shouldKeepFocusState={false}
    showDropDownToggle={false}
  >
    <ThemedSelectBox_HeaderWithSearchInput
      ListPreviewElement={[Function]}
      composeTheme="deeply"
      createNewLabel="createNewLabel"
      displayLoadingIndicator={false}
      displaySearchBox={true}
      keydown={Object {}}
      loadingLabel="loadingLabel"
      mapThemrProps={[Function]}
      noMatchesFoundLabel="noMatchesFoundLabel"
      onCreateNew={[MockFunction]}
      onKeyDown={[Function]}
      onSearchTermChange={[Function]}
      onSearchTermKeyPress={[MockFunction]}
      onValueChange={[MockFunction]}
      optionValueField="value"
      options={Array []}
      placeholder="placeholder"
      scrollable={true}
      searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
      searchTerm=""
      showDropDownToggle={true}
      theme={
        Object {
          "selectBox": "selectBoxClassName",
          "selectBox--disabled": "selectBox--disabledClassName",
          "selectBoxHeader": "selectBoxHeaderClassName",
          "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
          "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
          "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
          "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
          "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
          "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
          "selectBoxHeader__label": "selectBoxHeader__labelClassName",
          "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
          "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
          "selectBox__btn": "selectBox__btnClassName",
          "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
          "selectBox__contents": "selectBox__contentsClassName",
          "selectBox__groupHeader": "selectBox__groupHeaderClassName",
          "selectBox__item": "selectBox__itemClassName",
          "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
          "selectBox__list": "selectBox__listClassName",
          "wrapper": "wrapperClassName",
          "wrapper--highlight": "wrapper--highlightClassName",
        }
      }
      threshold={2}
      withoutGroupLabel="Without group"
    />
  </ThemedContextDropDownHeader>
  <ThemedContextDropDownContents
    className="selectBox__contentsClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    scrollable={true}
  >
    <ul
      className="selectBox__listClassName"
    >
      <SelectBox_ListPreview
        ListPreviewElement={[Function]}
        createNewLabel="createNewLabel"
        displayLoadingIndicator={false}
        displaySearchBox={true}
        focusedValue=""
        keydown={Object {}}
        loadingLabel="loadingLabel"
        noMatchesFound={false}
        noMatchesFoundLabel="noMatchesFoundLabel"
        onChange={[Function]}
        onCreateNew={[MockFunction]}
        onOptionFocus={[Function]}
        onSearchTermChange={[MockFunction]}
        onSearchTermKeyPress={[MockFunction]}
        onValueChange={[MockFunction]}
        optionValueAccessor={[Function]}
        optionValueField="value"
        options={Array []}
        placeholder="placeholder"
        scrollable={true}
        searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
        searchTerm=""
        searchTermLeftToType={2}
        showDropDownToggle={true}
        theme={
          Object {
            "selectBox": "selectBoxClassName",
            "selectBox--disabled": "selectBox--disabledClassName",
            "selectBoxHeader": "selectBoxHeaderClassName",
            "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
            "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
            "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
            "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
            "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
            "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
            "selectBoxHeader__label": "selectBoxHeader__labelClassName",
            "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
            "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
            "selectBox__btn": "selectBox__btnClassName",
            "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
            "selectBox__contents": "selectBox__contentsClassName",
            "selectBox__groupHeader": "selectBox__groupHeaderClassName",
            "selectBox__item": "selectBox__itemClassName",
            "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
            "selectBox__list": "selectBox__listClassName",
            "wrapper": "wrapperClassName",
            "wrapper--highlight": "wrapper--highlightClassName",
          }
        }
        threshold={2}
        withoutGroupLabel="Without group"
      />
    </ul>
  </ThemedContextDropDownContents>
</ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)>
`;

exports[`<SelectBox/> should render correctly with SearchBox 2`] = `
<div
  class="selectBoxClassName"
>
  <div
    aria-haspopup="true"
    class="selectBox__btnClassName"
    role="button"
  >
    <div
      class="selectBoxHeaderWithSearchInputClassName"
    >
      <svg
        aria-hidden="true"
        class="neos-svg-inline--fa neos-fa-search fa-w-16 search selectBoxHeaderWithSearchInput__iconClassName"
        data-icon="search"
        data-prefix="fas"
        role="img"
        viewBox="0 0 512 512"
        xmlns="http://www.w3.org/2000/svg"
      >
        <path
          d="M505 442.7L405.3 343c-4.5-4.5-10.6-7-17-7H372c27.6-35.3 44-79.7 44-128C416 93.1 322.9 0 208 0S0 93.1 0 208s93.1 208 208 208c48.3 0 92.7-16.4 128-44v16.3c0 6.4 2.5 12.5 7 17l99.7 99.7c9.4 9.4 24.6 9.4 33.9 0l28.3-28.3c9.4-9.4 9.4-24.6.1-34zM208 336c-70.7 0-128-57.2-128-128 0-70.7 57.2-128 128-128 70.7 0 128 57.2 128 128 0 70.7-57.2 128-128 128z"
          fill="currentColor"
        />
      </svg>
      <div
        class="selectBoxHeaderWithSearchInput__inputContainerClassName"
      >
        <input
          aria-disabled="false"
          aria-multiline="false"
          class="selectBoxHeaderWithSearchInput__inputClassName"
          placeholder="placeholder"
          role="textbox"
          type="search"
          value=""
        />
      </div>
    </div>
  </div>
  <ul
    aria-hidden="true"
    aria-label="dropdown"
    class="selectBox__contentsClassName"
    role="listbox"
  />
</div>
`;

exports[`<SelectBox/> should render correctly with no matches found 1`] = `
<ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)
  className="selectBoxClassName"
  composeTheme="deeply"
  isOpen={false}
  mapThemrProps={[Function]}
  onClose={[Function]}
  onToggle={[Function]}
>
  <ThemedContextDropDownHeader
    className="selectBox__btnClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    shouldKeepFocusState={false}
    showDropDownToggle={false}
  >
    <ThemedSelectBox_Header
      ListPreviewElement={[Function]}
      composeTheme="deeply"
      createNewLabel="createNewLabel"
      displayLoadingIndicator={false}
      displaySearchBox={false}
      keydown={Object {}}
      loadingLabel="loadingLabel"
      mapThemrProps={[Function]}
      noMatchesFoundLabel="noMatchesFoundLabel"
      onCreateNew={[MockFunction]}
      onReset={[Function]}
      onSearchTermChange={[MockFunction]}
      onSearchTermKeyPress={[MockFunction]}
      onValueChange={[MockFunction]}
      optionValueField="value"
      options={Array []}
      placeholder="placeholder"
      scrollable={true}
      searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
      showDropDownToggle={true}
      showResetButton={false}
      theme={
        Object {
          "selectBox": "selectBoxClassName",
          "selectBox--disabled": "selectBox--disabledClassName",
          "selectBoxHeader": "selectBoxHeaderClassName",
          "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
          "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
          "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
          "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
          "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
          "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
          "selectBoxHeader__label": "selectBoxHeader__labelClassName",
          "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
          "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
          "selectBox__btn": "selectBox__btnClassName",
          "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
          "selectBox__contents": "selectBox__contentsClassName",
          "selectBox__groupHeader": "selectBox__groupHeaderClassName",
          "selectBox__item": "selectBox__itemClassName",
          "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
          "selectBox__list": "selectBox__listClassName",
          "wrapper": "wrapperClassName",
          "wrapper--highlight": "wrapper--highlightClassName",
        }
      }
      threshold={0}
      withoutGroupLabel="Without group"
    />
  </ThemedContextDropDownHeader>
  <ThemedContextDropDownContents
    className="selectBox__contentsClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    scrollable={true}
  >
    <ul
      className="selectBox__listClassName"
    >
      <SelectBox_ListPreview
        ListPreviewElement={[Function]}
        createNewLabel="createNewLabel"
        displayLoadingIndicator={false}
        displaySearchBox={false}
        focusedValue=""
        keydown={Object {}}
        loadingLabel="loadingLabel"
        noMatchesFound={true}
        noMatchesFoundLabel="noMatchesFoundLabel"
        onChange={[Function]}
        onCreateNew={[MockFunction]}
        onOptionFocus={[Function]}
        onSearchTermChange={[MockFunction]}
        onSearchTermKeyPress={[MockFunction]}
        onValueChange={[MockFunction]}
        optionValueAccessor={[Function]}
        optionValueField="value"
        options={Array []}
        placeholder="placeholder"
        scrollable={true}
        searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
        searchTerm=""
        searchTermLeftToType={0}
        showDropDownToggle={true}
        theme={
          Object {
            "selectBox": "selectBoxClassName",
            "selectBox--disabled": "selectBox--disabledClassName",
            "selectBoxHeader": "selectBoxHeaderClassName",
            "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
            "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
            "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
            "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
            "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
            "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
            "selectBoxHeader__label": "selectBoxHeader__labelClassName",
            "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
            "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
            "selectBox__btn": "selectBox__btnClassName",
            "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
            "selectBox__contents": "selectBox__contentsClassName",
            "selectBox__groupHeader": "selectBox__groupHeaderClassName",
            "selectBox__item": "selectBox__itemClassName",
            "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
            "selectBox__list": "selectBox__listClassName",
            "wrapper": "wrapperClassName",
            "wrapper--highlight": "wrapper--highlightClassName",
          }
        }
        threshold={0}
        withoutGroupLabel="Without group"
      />
    </ul>
  </ThemedContextDropDownContents>
</ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)>
`;

exports[`<SelectBox/> should render correctly with no matches found 2`] = `
<div
  class="selectBoxClassName"
>
  <div
    aria-haspopup="true"
    class="selectBox__btnClassName"
    role="button"
  >
    <div
      class="selectBoxHeaderClassName"
    >
      <div
        class="selectBoxHeader__innerPreviewClassName"
      >
        <div
          class="selectBoxHeader__labelClassName"
        >
          placeholder
        </div>
      </div>
    </div>
  </div>
  <ul
    aria-hidden="true"
    aria-label="dropdown"
    class="selectBox__contentsClassName"
    role="listbox"
  />
</div>
`;

exports[`<SelectBox/> should render correctly with options 1`] = `
<ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)
  className="selectBoxClassName"
  composeTheme="deeply"
  isOpen={false}
  mapThemrProps={[Function]}
  onClose={[Function]}
  onToggle={[Function]}
>
  <ThemedContextDropDownHeader
    className="selectBox__btnClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    shouldKeepFocusState={false}
    showDropDownToggle={true}
  >
    <ThemedSelectBox_Header
      ListPreviewElement={[Function]}
      composeTheme="deeply"
      createNewLabel="createNewLabel"
      displayLoadingIndicator={false}
      displaySearchBox={false}
      keydown={Object {}}
      loadingLabel="loadingLabel"
      mapThemrProps={[Function]}
      noMatchesFoundLabel="noMatchesFoundLabel"
      onCreateNew={[MockFunction]}
      onReset={[Function]}
      onSearchTermChange={[MockFunction]}
      onSearchTermKeyPress={[MockFunction]}
      onValueChange={[MockFunction]}
      option={
        Object {
          "label": "option 1",
        }
      }
      optionValueField="value"
      options={
        Array [
          Object {
            "label": "option 1",
          },
          Object {
            "disabled": true,
            "label": "option 2",
          },
          Object {
            "icon": "level-up",
            "label": "option 3",
          },
        ]
      }
      placeholder="placeholder"
      scrollable={true}
      searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
      showDropDownToggle={true}
      showResetButton={false}
      theme={
        Object {
          "selectBox": "selectBoxClassName",
          "selectBox--disabled": "selectBox--disabledClassName",
          "selectBoxHeader": "selectBoxHeaderClassName",
          "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
          "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
          "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
          "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
          "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
          "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
          "selectBoxHeader__label": "selectBoxHeader__labelClassName",
          "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
          "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
          "selectBox__btn": "selectBox__btnClassName",
          "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
          "selectBox__contents": "selectBox__contentsClassName",
          "selectBox__groupHeader": "selectBox__groupHeaderClassName",
          "selectBox__item": "selectBox__itemClassName",
          "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
          "selectBox__list": "selectBox__listClassName",
          "wrapper": "wrapperClassName",
          "wrapper--highlight": "wrapper--highlightClassName",
        }
      }
      threshold={2}
      withoutGroupLabel="Without group"
    />
  </ThemedContextDropDownHeader>
  <ThemedContextDropDownContents
    className="selectBox__contentsClassName"
    composeTheme="deeply"
    mapThemrProps={[Function]}
    scrollable={true}
  >
    <ul
      className="selectBox__listClassName"
    >
      <SelectBox_ListPreview
        ListPreviewElement={[Function]}
        createNewLabel="createNewLabel"
        displayLoadingIndicator={false}
        displaySearchBox={false}
        focusedValue=""
        keydown={Object {}}
        loadingLabel="loadingLabel"
        noMatchesFound={false}
        noMatchesFoundLabel="noMatchesFoundLabel"
        onChange={[Function]}
        onCreateNew={[MockFunction]}
        onOptionFocus={[Function]}
        onSearchTermChange={[MockFunction]}
        onSearchTermKeyPress={[MockFunction]}
        onValueChange={[MockFunction]}
        optionValueAccessor={[Function]}
        optionValueField="value"
        options={
          Array [
            Object {
              "label": "option 1",
            },
            Object {
              "disabled": true,
              "label": "option 2",
            },
            Object {
              "icon": "level-up",
              "label": "option 3",
            },
          ]
        }
        placeholder="placeholder"
        scrollable={true}
        searchBoxLeftToTypeLabel="searchBoxLeftToTypeLabel"
        searchTerm=""
        searchTermLeftToType={0}
        showDropDownToggle={true}
        theme={
          Object {
            "selectBox": "selectBoxClassName",
            "selectBox--disabled": "selectBox--disabledClassName",
            "selectBoxHeader": "selectBoxHeaderClassName",
            "selectBoxHeaderWithSearchInput": "selectBoxHeaderWithSearchInputClassName",
            "selectBoxHeaderWithSearchInput__icon": "selectBoxHeaderWithSearchInput__iconClassName",
            "selectBoxHeaderWithSearchInput__input": "selectBoxHeaderWithSearchInput__inputClassName",
            "selectBoxHeaderWithSearchInput__inputContainer": "selectBoxHeaderWithSearchInput__inputContainerClassName",
            "selectBoxHeader__icon": "selectBoxHeader__iconClassName",
            "selectBoxHeader__innerPreview": "selectBoxHeader__innerPreviewClassName",
            "selectBoxHeader__label": "selectBoxHeader__labelClassName",
            "selectBoxHeader__seperator": "selectBoxHeader__seperatorClassName",
            "selectBoxHeader__wrapperIconWrapper": "selectBoxHeader__wrapperIconWrapperClassName",
            "selectBox__btn": "selectBox__btnClassName",
            "selectBox__btn--noRightPadding": "selectBox__btn--noRightPaddingClassName",
            "selectBox__contents": "selectBox__contentsClassName",
            "selectBox__groupHeader": "selectBox__groupHeaderClassName",
            "selectBox__item": "selectBox__itemClassName",
            "selectBox__item--isGroup": "selectBox__item--isGroupClassName",
            "selectBox__list": "selectBox__listClassName",
            "wrapper": "wrapperClassName",
            "wrapper--highlight": "wrapper--highlightClassName",
          }
        }
        threshold={2}
        withoutGroupLabel="Without group"
      />
    </ul>
  </ThemedContextDropDownContents>
</ThemedclickOutside(StatelessDropDownWrapperWithoutClickOutsideBehavior)>
`;

exports[`<SelectBox/> should render correctly with options 2`] = `
<div
  class="selectBoxClassName"
>
  <div
    aria-haspopup="true"
    class="selectBox__btnClassName undefined"
    role="button"
  >
    <div
      class="selectBoxHeaderClassName"
    >
      <div
        class="selectBoxHeader__innerPreviewClassName"
      >
        <div
          class=""
          role="button"
        >
          option 1
        </div>
      </div>
    </div>
    <svg
      aria-hidden="true"
      class="neos-svg-inline--fa neos-fa-chevron-down fa-w-14 chevron-down"
      data-icon="chevron-down"
      data-prefix="fas"
      role="img"
      viewBox="0 0 448 512"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M207.029 381.476L12.686 187.132c-9.373-9.373-9.373-24.569 0-33.941l22.667-22.667c9.357-9.357 24.522-9.375 33.901-.04L224 284.505l154.745-154.021c9.379-9.335 24.544-9.317 33.901.04l22.667 22.667c9.373 9.373 9.373 24.569 0 33.941L240.971 381.476c-9.373 9.372-24.569 9.372-33.942 0z"
        fill="currentColor"
      />
    </svg>
  </div>
  <ul
    aria-hidden="true"
    aria-label="dropdown"
    class="selectBox__contentsClassName"
    role="listbox"
  />
</div>
`;
